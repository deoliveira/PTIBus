package org.grupoandroid.ptibus.models;

import java.util.List;
import org.grupoandroid.ptibus.models.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table HORARIO.
 */
public class Horario {

    private Long id;
    private long saida;
    private Long linha_id;
    private Long rota_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient HorarioDao myDao;

    private Linha linha;
    private Long linha__resolvedKey;

    private Rota rota;
    private Long rota__resolvedKey;

    private List<horario_diaSemana> horario_diaSemanaList;

    public Horario() {
    }

    public Horario(Long id) {
        this.id = id;
    }

    public Horario(Long id, long saida, Long linha_id, Long rota_id) {
        this.id = id;
        this.saida = saida;
        this.linha_id = linha_id;
        this.rota_id = rota_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getHorarioDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getSaida() {
        return saida;
    }

    public void setSaida(long saida) {
        this.saida = saida;
    }

    public Long getLinha_id() {
        return linha_id;
    }

    public void setLinha_id(Long linha_id) {
        this.linha_id = linha_id;
    }

    public Long getRota_id() {
        return rota_id;
    }

    public void setRota_id(Long rota_id) {
        this.rota_id = rota_id;
    }

    /** To-one relationship, resolved on first access. */
    public Linha getLinha() {
        if (linha__resolvedKey == null || !linha__resolvedKey.equals(linha_id)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LinhaDao targetDao = daoSession.getLinhaDao();
            linha = targetDao.load(linha_id);
            linha__resolvedKey = linha_id;
        }
        return linha;
    }

    public void setLinha(Linha linha) {
        this.linha = linha;
        linha_id = linha == null ? null : linha.getId();
        linha__resolvedKey = linha_id;
    }

    /** To-one relationship, resolved on first access. */
    public Rota getRota() {
        if (rota__resolvedKey == null || !rota__resolvedKey.equals(rota_id)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RotaDao targetDao = daoSession.getRotaDao();
            rota = targetDao.load(rota_id);
            rota__resolvedKey = rota_id;
        }
        return rota;
    }

    public void setRota(Rota rota) {
        this.rota = rota;
        rota_id = rota == null ? null : rota.getId();
        rota__resolvedKey = rota_id;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<horario_diaSemana> getHorario_diaSemanaList() {
        if (horario_diaSemanaList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            horario_diaSemanaDao targetDao = daoSession.getHorario_diaSemanaDao();
            horario_diaSemanaList = targetDao._queryHorario_Horario_diaSemanaList(id);
        }
        return horario_diaSemanaList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetHorario_diaSemanaList() {
        horario_diaSemanaList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
