package org.grupoandroid.ptibus.models;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

import org.grupoandroid.ptibus.models.horario_diaSemana;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HORARIO_DIA_SEMANA.
*/
public class horario_diaSemanaDao extends AbstractDao<horario_diaSemana, Void> {

    public static final String TABLENAME = "HORARIO_DIA_SEMANA";

    /**
     * Properties of entity horario_diaSemana.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Horario_id = new Property(0, Long.class, "horario_id", false, "HORARIO_ID");
        public final static Property Diasemana_id = new Property(1, Long.class, "diasemana_id", false, "DIASEMANA_ID");
    };

    private DaoSession daoSession;

    private Query<horario_diaSemana> horario_Horario_diaSemanaListQuery;
    private Query<horario_diaSemana> diaSemana_Horario_diaSemanaListQuery;

    public horario_diaSemanaDao(DaoConfig config) {
        super(config);
    }
    
    public horario_diaSemanaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HORARIO_DIA_SEMANA' (" + //
                "'HORARIO_ID' INTEGER," + // 0: horario_id
                "'DIASEMANA_ID' INTEGER);"); // 1: diasemana_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HORARIO_DIA_SEMANA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, horario_diaSemana entity) {
        stmt.clearBindings();
 
        Long horario_id = entity.getHorario_id();
        if (horario_id != null) {
            stmt.bindLong(1, horario_id);
        }
 
        Long diasemana_id = entity.getDiasemana_id();
        if (diasemana_id != null) {
            stmt.bindLong(2, diasemana_id);
        }
    }

    @Override
    protected void attachEntity(horario_diaSemana entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public horario_diaSemana readEntity(Cursor cursor, int offset) {
        horario_diaSemana entity = new horario_diaSemana( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // horario_id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1) // diasemana_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, horario_diaSemana entity, int offset) {
        entity.setHorario_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDiasemana_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(horario_diaSemana entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(horario_diaSemana entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "horario_diaSemanaList" to-many relationship of Horario. */
    public synchronized List<horario_diaSemana> _queryHorario_Horario_diaSemanaList(Long horario_id) {
        if (horario_Horario_diaSemanaListQuery == null) {
            QueryBuilder<horario_diaSemana> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.Horario_id.eq(horario_id));
            horario_Horario_diaSemanaListQuery = queryBuilder.build();
        } else {
            horario_Horario_diaSemanaListQuery.setParameter(0, horario_id);
        }
        return horario_Horario_diaSemanaListQuery.list();
    }

    /** Internal query to resolve the "horario_diaSemanaList" to-many relationship of DiaSemana. */
    public synchronized List<horario_diaSemana> _queryDiaSemana_Horario_diaSemanaList(Long diasemana_id) {
        if (diaSemana_Horario_diaSemanaListQuery == null) {
            QueryBuilder<horario_diaSemana> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.Diasemana_id.eq(diasemana_id));
            diaSemana_Horario_diaSemanaListQuery = queryBuilder.build();
        } else {
            diaSemana_Horario_diaSemanaListQuery.setParameter(0, diasemana_id);
        }
        return diaSemana_Horario_diaSemanaListQuery.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getHorarioDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getDiaSemanaDao().getAllColumns());
            builder.append(" FROM HORARIO_DIA_SEMANA T");
            builder.append(" LEFT JOIN HORARIO T0 ON T.'HORARIO_ID'=T0.'_id'");
            builder.append(" LEFT JOIN DIA_SEMANA T1 ON T.'DIASEMANA_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected horario_diaSemana loadCurrentDeep(Cursor cursor, boolean lock) {
        horario_diaSemana entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Horario horario = loadCurrentOther(daoSession.getHorarioDao(), cursor, offset);
        entity.setHorario(horario);
        offset += daoSession.getHorarioDao().getAllColumns().length;

        DiaSemana diaSemana = loadCurrentOther(daoSession.getDiaSemanaDao(), cursor, offset);
        entity.setDiaSemana(diaSemana);

        return entity;    
    }

    public horario_diaSemana loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<horario_diaSemana> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<horario_diaSemana> list = new ArrayList<horario_diaSemana>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<horario_diaSemana> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<horario_diaSemana> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
