package org.grupoandroid.ptibus.models;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

import org.grupoandroid.ptibus.models.Horario;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HORARIO.
*/
public class HorarioDao extends AbstractDao<Horario, Long> {

    public static final String TABLENAME = "HORARIO";

    /**
     * Properties of entity Horario.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Saida = new Property(1, long.class, "saida", false, "SAIDA");
        public final static Property Linha_id = new Property(2, Long.class, "linha_id", false, "LINHA_ID");
        public final static Property Rota_id = new Property(3, Long.class, "rota_id", false, "ROTA_ID");
    };

    private DaoSession daoSession;

    private Query<Horario> linha_HorariosQuery;
    private Query<Horario> rota_HorariosQuery;

    public HorarioDao(DaoConfig config) {
        super(config);
    }
    
    public HorarioDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HORARIO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SAIDA' INTEGER NOT NULL ," + // 1: saida
                "'LINHA_ID' INTEGER," + // 2: linha_id
                "'ROTA_ID' INTEGER);"); // 3: rota_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HORARIO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Horario entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSaida());
 
        Long linha_id = entity.getLinha_id();
        if (linha_id != null) {
            stmt.bindLong(3, linha_id);
        }
 
        Long rota_id = entity.getRota_id();
        if (rota_id != null) {
            stmt.bindLong(4, rota_id);
        }
    }

    @Override
    protected void attachEntity(Horario entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Horario readEntity(Cursor cursor, int offset) {
        Horario entity = new Horario( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // saida
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // linha_id
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // rota_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Horario entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSaida(cursor.getLong(offset + 1));
        entity.setLinha_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setRota_id(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Horario entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Horario entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "horarios" to-many relationship of Linha. */
    public synchronized List<Horario> _queryLinha_Horarios(Long linha_id) {
        if (linha_HorariosQuery == null) {
            QueryBuilder<Horario> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.Linha_id.eq(linha_id));
            linha_HorariosQuery = queryBuilder.build();
        } else {
            linha_HorariosQuery.setParameter(0, linha_id);
        }
        return linha_HorariosQuery.list();
    }

    /** Internal query to resolve the "horarios" to-many relationship of Rota. */
    public synchronized List<Horario> _queryRota_Horarios(Long rota_id) {
        if (rota_HorariosQuery == null) {
            QueryBuilder<Horario> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.Rota_id.eq(rota_id));
            rota_HorariosQuery = queryBuilder.build();
        } else {
            rota_HorariosQuery.setParameter(0, rota_id);
        }
        return rota_HorariosQuery.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getLinhaDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getRotaDao().getAllColumns());
            builder.append(" FROM HORARIO T");
            builder.append(" LEFT JOIN LINHA T0 ON T.'LINHA_ID'=T0.'_id'");
            builder.append(" LEFT JOIN ROTA T1 ON T.'ROTA_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Horario loadCurrentDeep(Cursor cursor, boolean lock) {
        Horario entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Linha linha = loadCurrentOther(daoSession.getLinhaDao(), cursor, offset);
        entity.setLinha(linha);
        offset += daoSession.getLinhaDao().getAllColumns().length;

        Rota rota = loadCurrentOther(daoSession.getRotaDao(), cursor, offset);
        entity.setRota(rota);

        return entity;    
    }

    public Horario loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Horario> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Horario> list = new ArrayList<Horario>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Horario> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Horario> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
