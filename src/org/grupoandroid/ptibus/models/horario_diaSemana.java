package org.grupoandroid.ptibus.models;

import org.grupoandroid.ptibus.models.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table HORARIO_DIA_SEMANA.
 */
public class horario_diaSemana {

    private Long horario_id;
    private Long diasemana_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient horario_diaSemanaDao myDao;

    private Horario horario;
    private Long horario__resolvedKey;

    private DiaSemana diaSemana;
    private Long diaSemana__resolvedKey;


    public horario_diaSemana() {
    }

    public horario_diaSemana(Long horario_id, Long diasemana_id) {
        this.horario_id = horario_id;
        this.diasemana_id = diasemana_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getHorario_diaSemanaDao() : null;
    }

    public Long getHorario_id() {
        return horario_id;
    }

    public void setHorario_id(Long horario_id) {
        this.horario_id = horario_id;
    }

    public Long getDiasemana_id() {
        return diasemana_id;
    }

    public void setDiasemana_id(Long diasemana_id) {
        this.diasemana_id = diasemana_id;
    }

    /** To-one relationship, resolved on first access. */
    public Horario getHorario() {
        if (horario__resolvedKey == null || !horario__resolvedKey.equals(horario_id)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            HorarioDao targetDao = daoSession.getHorarioDao();
            horario = targetDao.load(horario_id);
            horario__resolvedKey = horario_id;
        }
        return horario;
    }

    public void setHorario(Horario horario) {
        this.horario = horario;
        horario_id = horario == null ? null : horario.getId();
        horario__resolvedKey = horario_id;
    }

    /** To-one relationship, resolved on first access. */
    public DiaSemana getDiaSemana() {
        if (diaSemana__resolvedKey == null || !diaSemana__resolvedKey.equals(diasemana_id)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DiaSemanaDao targetDao = daoSession.getDiaSemanaDao();
            diaSemana = targetDao.load(diasemana_id);
            diaSemana__resolvedKey = diasemana_id;
        }
        return diaSemana;
    }

    public void setDiaSemana(DiaSemana diaSemana) {
        this.diaSemana = diaSemana;
        diasemana_id = diaSemana == null ? null : diaSemana.getId();
        diaSemana__resolvedKey = diasemana_id;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
